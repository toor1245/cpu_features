(self.webpackChunk=self.webpackChunk||[]).push([[509],{342:(n,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>N});var a=s(252);const t=(0,a.uE)('<h2 id="design-rationale" tabindex="-1"><a class="header-anchor" href="#design-rationale" aria-hidden="true">#</a> Design Rationale</h2><ul><li><strong>Simple to use.</strong> See the snippets below for examples.</li><li><strong>Extensible.</strong> Easy to add missing features or architectures.</li><li><strong>Compatible with old compilers</strong> and available on many architectures so it can be used widely. To ensure that cpu_features works on as many platforms as possible, we implemented it in a highly portable version of C: C99.</li><li><strong>Sandbox-compatible.</strong> The library uses a variety of strategies to cope with sandboxed environments or when <code>cpuid</code> is unavailable. This is useful when running integration tests in hermetic environments.</li><li><strong>Thread safe, no memory allocation, and raises no exceptions.</strong> cpu_features is suitable for implementing fundamental libc functions like <code>malloc</code>, <code>memcpy</code>, and <code>memcmp</code>.</li><li><strong>Unit tested.</strong></li></ul><p><a name="codesample"></a></p><h2 id="code-samples" tabindex="-1"><a class="header-anchor" href="#code-samples" aria-hidden="true">#</a> Code samples</h2><p><strong>Note:</strong> For C++ code, the library functions are defined in the <code>cpu_features</code> namespace.</p><h3 id="checking-features-at-runtime" tabindex="-1"><a class="header-anchor" href="#checking-features-at-runtime" aria-hidden="true">#</a> Checking features at runtime</h3><p>Here&#39;s a simple example that executes a codepath if the CPU supports both the AES and the SSE4.2 instruction sets:</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;cpuinfo_x86.h&quot;</span></span>\n\n<span class="token comment">// For C++, add `using namespace cpu_features;`</span>\n<span class="token keyword">static</span> <span class="token keyword">const</span> X86Features features <span class="token operator">=</span> <span class="token function">GetX86Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>features<span class="token punctuation">;</span>\n\n<span class="token keyword">void</span> <span class="token function">Compute</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>features<span class="token punctuation">.</span>aes <span class="token operator">&amp;&amp;</span> features<span class="token punctuation">.</span>sse4_2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Run optimized code.</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Run standard code.</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="caching-for-faster-evaluation-of-complex-checks" tabindex="-1"><a class="header-anchor" href="#caching-for-faster-evaluation-of-complex-checks" aria-hidden="true">#</a> Caching for faster evaluation of complex checks</h3><p>If you wish, you can read all the features at once into a global variable, and then query for the specific features you care about. Below, we store all the ARM features and then check whether AES and NEON are supported.</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;cpuinfo_arm.h&quot;</span></span>\n\n<span class="token comment">// For C++, add `using namespace cpu_features;`</span>\n<span class="token keyword">static</span> <span class="token keyword">const</span> ArmFeatures features <span class="token operator">=</span> <span class="token function">GetArmInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>features<span class="token punctuation">;</span>\n<span class="token keyword">static</span> <span class="token keyword">const</span> bool has_aes_and_neon <span class="token operator">=</span> features<span class="token punctuation">.</span>aes <span class="token operator">&amp;&amp;</span> features<span class="token punctuation">.</span>neon<span class="token punctuation">;</span>\n\n<span class="token comment">// use has_aes_and_neon.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>This is a good approach to take if you&#39;re checking for combinations of features when using a compiler that is slow to extract individual bits from bit-packed structures.</p><h3 id="checking-compile-time-flags" tabindex="-1"><a class="header-anchor" href="#checking-compile-time-flags" aria-hidden="true">#</a> Checking compile time flags</h3><p>The following code determines whether the compiler was told to use the AVX instruction set (e.g., <code>g++ -mavx</code>) and sets <code>has_avx</code> accordingly.</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;cpuinfo_x86.h&quot;</span></span>\n\n<span class="token comment">// For C++, add `using namespace cpu_features;`</span>\n<span class="token keyword">static</span> <span class="token keyword">const</span> X86Features features <span class="token operator">=</span> <span class="token function">GetX86Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>features<span class="token punctuation">;</span>\n<span class="token keyword">static</span> <span class="token keyword">const</span> bool has_avx <span class="token operator">=</span> CPU_FEATURES_COMPILED_X86_AVX <span class="token operator">||</span> features<span class="token punctuation">.</span>avx<span class="token punctuation">;</span>\n\n<span class="token comment">// use has_avx.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><code>CPU_FEATURES_COMPILED_X86_AVX</code> is set to 1 if the compiler was instructed to use AVX and 0 otherwise, combining compile time and runtime knowledge.</p><h3 id="rejecting-poor-hardware-implementations-based-on-microarchitecture" tabindex="-1"><a class="header-anchor" href="#rejecting-poor-hardware-implementations-based-on-microarchitecture" aria-hidden="true">#</a> Rejecting poor hardware implementations based on microarchitecture</h3><p>On x86, the first incarnation of a feature in a microarchitecture might not be the most efficient (e.g. AVX on Sandy Bridge). We provide a function to retrieve the underlying microarchitecture so you can decide whether to use it.</p><p>Below, <code>has_fast_avx</code> is set to 1 if the CPU supports the AVX instruction set—but only if it&#39;s not Sandy Bridge.</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h&gt;</span></span>\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;cpuinfo_x86.h&quot;</span></span>\n\n<span class="token comment">// For C++, add `using namespace cpu_features;`</span>\n<span class="token keyword">static</span> <span class="token keyword">const</span> X86Info info <span class="token operator">=</span> <span class="token function">GetX86Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">static</span> <span class="token keyword">const</span> X86Microarchitecture uarch <span class="token operator">=</span> <span class="token function">GetX86Microarchitecture</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">static</span> <span class="token keyword">const</span> bool has_fast_avx <span class="token operator">=</span> info<span class="token punctuation">.</span>features<span class="token punctuation">.</span>avx <span class="token operator">&amp;&amp;</span> uarch <span class="token operator">!=</span> INTEL_SNB<span class="token punctuation">;</span>\n\n<span class="token comment">// use has_fast_avx.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>This feature is currently available only for x86 microarchitectures.</p><p><a name="usagesample"></a></p><h3 id="running-sample-code" tabindex="-1"><a class="header-anchor" href="#running-sample-code" aria-hidden="true">#</a> Running sample code</h3><p>Building <code>cpu_features</code> (check <a href="#quickstart">quickstart</a> below) brings a small executable to test the library.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code> % ./build/list_cpu_features\narch            <span class="token builtin class-name">:</span> x86\nbrand           <span class="token builtin class-name">:</span>        Intel<span class="token punctuation">(</span>R<span class="token punctuation">)</span> Xeon<span class="token punctuation">(</span>R<span class="token punctuation">)</span> CPU E5-1650 <span class="token number">0</span> @ <span class="token number">3</span>.20GHz\nfamily          <span class="token builtin class-name">:</span>   <span class="token number">6</span> <span class="token punctuation">(</span>0x06<span class="token punctuation">)</span>\nmodel           <span class="token builtin class-name">:</span>  <span class="token number">45</span> <span class="token punctuation">(</span>0x2D<span class="token punctuation">)</span>\nstepping        <span class="token builtin class-name">:</span>   <span class="token number">7</span> <span class="token punctuation">(</span>0x07<span class="token punctuation">)</span>\nuarch           <span class="token builtin class-name">:</span> INTEL_SNB\nflags           <span class="token builtin class-name">:</span> aes,avx,cx16,smx,sse4_1,sse4_2,ssse3\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>% ./build/list_cpu_features --json\n<span class="token punctuation">{</span><span class="token string">&quot;arch&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;x86&quot;</span>,<span class="token string">&quot;brand&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;       Intel(R) Xeon(R) CPU E5-1650 0 @ 3.20GHz&quot;</span>,<span class="token string">&quot;family&quot;</span>:6,<span class="token string">&quot;model&quot;</span>:45,<span class="token string">&quot;stepping&quot;</span>:7,<span class="token string">&quot;uarch&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;INTEL_SNB&quot;</span>,<span class="token string">&quot;flags&quot;</span>:<span class="token punctuation">[</span><span class="token string">&quot;aes&quot;</span>,<span class="token string">&quot;avx&quot;</span>,<span class="token string">&quot;cx16&quot;</span>,<span class="token string">&quot;smx&quot;</span>,<span class="token string">&quot;sse4_1&quot;</span>,<span class="token string">&quot;sse4_2&quot;</span>,<span class="token string">&quot;ssse3&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><a name="support"></a></p><h2 id="what-s-supported" tabindex="-1"><a class="header-anchor" href="#what-s-supported" aria-hidden="true">#</a> What&#39;s supported</h2><table><thead><tr><th></th><th style="text-align:center;">x86³</th><th style="text-align:center;">ARM</th><th style="text-align:center;">AArch64</th><th style="text-align:center;">MIPS⁴</th><th style="text-align:center;">POWER</th></tr></thead><tbody><tr><td>Android</td><td style="text-align:center;">yes²</td><td style="text-align:center;">yes¹</td><td style="text-align:center;">yes¹</td><td style="text-align:center;">yes¹</td><td style="text-align:center;">N/A</td></tr><tr><td>iOS</td><td style="text-align:center;">N/A</td><td style="text-align:center;">not yet</td><td style="text-align:center;">not yet</td><td style="text-align:center;">N/A</td><td style="text-align:center;">N/A</td></tr><tr><td>Linux</td><td style="text-align:center;">yes²</td><td style="text-align:center;">yes¹</td><td style="text-align:center;">yes¹</td><td style="text-align:center;">yes¹</td><td style="text-align:center;">yes¹</td></tr><tr><td>MacOs</td><td style="text-align:center;">yes²</td><td style="text-align:center;">N/A</td><td style="text-align:center;">not yet</td><td style="text-align:center;">N/A</td><td style="text-align:center;">no</td></tr><tr><td>Windows</td><td style="text-align:center;">yes²</td><td style="text-align:center;">not yet</td><td style="text-align:center;">not yet</td><td style="text-align:center;">N/A</td><td style="text-align:center;">N/A</td></tr><tr><td>FreeBSD</td><td style="text-align:center;">yes²</td><td style="text-align:center;">not yet</td><td style="text-align:center;">not yet</td><td style="text-align:center;">not yet</td><td style="text-align:center;">not yet</td></tr></tbody></table>',29),l=(0,a.Wm)("strong",null,"Features revealed from Linux.",-1),o=(0,a.Uk)(" We gather data from several sources depending on availability: "),r=(0,a.Uk)("from glibc's "),c={href:"https://www.gnu.org/software/libc/manual/html_node/Auxiliary-Vector.html",target:"_blank",rel:"noopener noreferrer"},p=(0,a.Uk)("getauxval"),i=(0,a.Wm)("li",null,[(0,a.Uk)("by parsing "),(0,a.Wm)("code",null,"/proc/self/auxv")],-1),u=(0,a.Wm)("li",null,[(0,a.Uk)("by parsing "),(0,a.Wm)("code",null,"/proc/cpuinfo")],-1),d=(0,a.Wm)("li",null,[(0,a.Wm)("strong",null,"Features revealed from CPU."),(0,a.Uk)(" features are retrieved by using the "),(0,a.Wm)("code",null,"cpuid"),(0,a.Uk)(" instruction.")],-1),m=(0,a.Wm)("li",null,[(0,a.Wm)("strong",null,"Microarchitecture detection."),(0,a.Uk)(" On x86 some features are not always implemented efficiently in hardware (e.g. AVX on Sandybridge). Exposing the microarchitecture allows the client to reject particular microarchitectures.")],-1),h=(0,a.Wm)("li",null,"All flavors of Mips are supported, little and big endian as well as 32/64 bits.",-1),k=(0,a.Wm)("p",null,[(0,a.Wm)("a",{name:"ndk"})],-1),b=(0,a.Wm)("h2",{id:"android-ndk-s-drop-in-replacement",tabindex:"-1"},[(0,a.Wm)("a",{class:"header-anchor",href:"#android-ndk-s-drop-in-replacement","aria-hidden":"true"},"#"),(0,a.Uk)(" Android NDK's drop in replacement")],-1),g={href:"https://github.com/google/cpu_features",target:"_blank",rel:"noopener noreferrer"},f=(0,a.Uk)("cpu_features"),y=(0,a.Uk)(" is now officially supporting Android and offers a drop in replacement of for the NDK's "),x={href:"https://android.googlesource.com/platform/ndk/+/master/sources/android/cpufeatures/cpu-features.h",target:"_blank",rel:"noopener noreferrer"},v=(0,a.Uk)("cpu-features.h"),w=(0,a.Uk)(" , see "),_=(0,a.Wm)("a",{href:"ndk_compat"},"ndk_compat",-1),q=(0,a.Uk)(" folder for details."),C=(0,a.uE)('<p><a name="license"></a></p><h2 id="license" tabindex="-1"><a class="header-anchor" href="#license" aria-hidden="true">#</a> License</h2><p>The cpu_features library is licensed under the terms of the Apache license. See <a href="LICENSE">LICENSE</a> for more information.</p><p><a name="cmake"></a></p><h2 id="build-with-cmake" tabindex="-1"><a class="header-anchor" href="#build-with-cmake" aria-hidden="true">#</a> Build with CMake</h2>',5),W=(0,a.Uk)("Please check the "),A=(0,a.Uk)("CMake build instructions"),E=(0,a.Uk)("."),U=(0,a.uE)('<p><a name="quickstart"></a></p><h3 id="quickstart-with-ninja" tabindex="-1"><a class="header-anchor" href="#quickstart-with-ninja" aria-hidden="true">#</a> Quickstart with <code>Ninja</code></h3><ul><li>build <code>list_cpu_features</code></li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>    cmake -B/tmp/cpu_features -H. -GNinja -DCMAKE_BUILD_TYPE=Release\n    ninja -C/tmp/cpu_features\n    /tmp/cpu_features/list_cpu_features --json\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>run tests</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>    cmake -B/tmp/cpu_features -H. -GNinja -DBUILD_TESTING=ON\n    ninja -C/tmp/cpu_features\n    ninja -C/tmp/cpu_features test\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',6),N={render:function(n,e){const s=(0,a.up)("OutboundLink"),N=(0,a.up)("RouterLink");return(0,a.wg)(),(0,a.j4)(a.HY,null,[t,(0,a.Wm)("ol",null,[(0,a.Wm)("li",null,[l,o,(0,a.Wm)("ul",null,[(0,a.Wm)("li",null,[r,(0,a.Wm)("a",c,[p,(0,a.Wm)(s)])]),i,u])]),d,m,h]),k,b,(0,a.Wm)("p",null,[(0,a.Wm)("a",g,[f,(0,a.Wm)(s)]),y,(0,a.Wm)("a",x,[v,(0,a.Wm)(s)]),w,_,q]),C,(0,a.Wm)("p",null,[W,(0,a.Wm)(N,{to:"/cmake/"},{default:(0,a.w5)((()=>[A])),_:1}),E]),U],64)}}},301:(n,e,s)=>{"use strict";s.r(e),s.d(e,{data:()=>a});const a={key:"v-8daa1a0e",path:"/",title:"",lang:"en-US",frontmatter:{home:!0},excerpt:"",headers:[{level:2,title:"Design Rationale",slug:"design-rationale",children:[]},{level:2,title:"Code samples",slug:"code-samples",children:[{level:3,title:"Checking features at runtime",slug:"checking-features-at-runtime",children:[]},{level:3,title:"Caching for faster evaluation of complex checks",slug:"caching-for-faster-evaluation-of-complex-checks",children:[]},{level:3,title:"Checking compile time flags",slug:"checking-compile-time-flags",children:[]},{level:3,title:"Rejecting poor hardware implementations based on microarchitecture",slug:"rejecting-poor-hardware-implementations-based-on-microarchitecture",children:[]},{level:3,title:"Running sample code",slug:"running-sample-code",children:[]}]},{level:2,title:"What's supported",slug:"what-s-supported",children:[]},{level:2,title:"Android NDK's drop in replacement",slug:"android-ndk-s-drop-in-replacement",children:[]},{level:2,title:"License",slug:"license",children:[]},{level:2,title:"Build with CMake",slug:"build-with-cmake",children:[{level:3,title:"Quickstart with Ninja",slug:"quickstart-with-ninja",children:[]}]}],filePathRelative:"README.md",git:{updatedTime:1625698216e3,contributors:[]}}}}]);